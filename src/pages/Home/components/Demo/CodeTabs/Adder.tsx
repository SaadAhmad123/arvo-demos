import type { CodeBlockProps } from '../../../../../components/CodeBlock';
const label = 'add.handler.ts';
export const AdderTab: CodeBlockProps['tabs'][number] = {
  title: label,
  lang: 'ts',
  code: `
import { createSimpleArvoContract } from 'arvo-core';
import { createArvoEventHandler, type EventHandlerFactory } from 'arvo-event-handler';
import { z } from 'zod';

export const addContract = createSimpleArvoContract({
  uri: '#/handler/calculator/add',
  type: 'calculator.add',
  description: 'This service provides the sum of all the numbers provided to it.',
  versions: {
    '1.0.0': {
      accepts: z.object({
        numbers: z.number().array(),
      }),
      emits: z.object({
        result: z.number(),
      }),
    },
  },
});

export const addHandler: EventHandlerFactory = () =>
  createArvoEventHandler({
    contract: addContract,
    executionunits: 0,
    handler: {
      '1.0.0': async ({ event }) => {
        if (event.data.numbers.length === 0) {
          // This will result in 'sys.com.calculator.add.error' event
          throw new Error('Numbers array cannot be empty');
        }
        return {
          type: 'evt.calculator.add.success', // Success event type auto-generated by createSimpleArvoContract utility based on the contract type
          data: {
            result: event.data.numbers.reduce((acc, cur) => acc + cur, 0),
          },
          executionunits: event.data.numbers.length * 1e-6, // Dynamic execution cost based on input complexity - units can be customized per system requirements (USD, credits, etc.)
        };
      },
    },
  });

`,
};
